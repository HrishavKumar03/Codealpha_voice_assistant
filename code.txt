import speech_recognition as sr
import pyttsx3
import webbrowser
import subprocess
import pyaudio
import secrets
import string

class VoiceAssistant:
    def __init__(self):
        self.recognizer = sr.Recognizer()
        self.tts_engine = pyttsx3.init()
        self.audio = pyaudio.PyAudio()
        self.stream = None

    def speak(self, text):
        self.tts_engine.say(text)
        self.tts_engine.runAndWait()

    def listen(self):
        if self.stream is None:
            self.stream = self.audio.open(format=pyaudio.paInt16, channels=1, rate=44100, input=True, frames_per_buffer=1024)
        with sr.Microphone(device_index=2) as source:
            self.recognizer.adjust_for_ambient_noise(source)             
            print("Listening...")
            audio = self.recognizer.listen(source)
            try:
                print("Recognizing...")
                command = self.recognizer.recognize_google(audio)
                print(f"You said: {command}")
                return command.lower()
            except sr.UnknownValueError:
                self.speak("Sorry, Can You Please Repeat The Command.")
            except sr.RequestError:
                self.speak("Sorry, my speech service is down.")
            return ""

    def open_chrome(self, url=None):
        try:
            if url:
                webbrowser.get("chrome").open(url)
            else:
                subprocess.Popen(r'C:\Program Files\Google\Chrome\Application\chrome.exe')
            self.speak("Google Chrome has been opened.")
        except Exception as e:
            self.speak(f"An error occurred: {e}")

    def open_youtube(self):
        youtube_url = "https://www.youtube.com"
        self.open_chrome(youtube_url)
        self.speak("YouTube has been opened in Google Chrome.")

    def open_this_pc(self):
        try:
            subprocess.Popen('explorer "shell:MyComputerFolder"')
            self.speak("This PC has been opened.")
        except Exception as e:
            self.speak(f"An error occurred: {e}")

    def generate_password(self, length=12):
        try:
            # Define the possible characters
            characters = string.ascii_letters + string.digits + string.punctuation
            # Generate a secure random password
            password = ''.join(secrets.choice(characters) for i in range(length))
            self.speak("Your random password is ready.")
            print(f"Generated Password: {password}")
            return password
        except Exception as e:
            self.speak(f"An error occurred while generating the password: {e}")

    def main(self):
        self.speak("Hello Hrishav")
        self.speak("How can I assist you?")
        while True:
            command = self.listen()
            if "exit" in command:
                self.speak("Goodbye! Have a great Day")
                break
            elif "hello" in command:
                self.speak("Hello! How can I help you today?")
            elif "your name" in command:
                self.speak("I am your voice assistant.")
            elif "open chrome" in command:
                self.open_chrome()
            elif "open youtube" in command:
                self.open_youtube()
            elif "open this pc" in command or "open my computer" in command or "open file explorer" in command:
                self.open_this_pc()
            elif "generate password" in command or "random password" in command:
                self.generate_password()
            else:
                self.speak("Sorry, I can't help with that.")

    def cleanup(self):
        if self.stream is not None:
            self.stream.close()
        self.audio.terminate()

if __name__ == "__main__":
    assistant = VoiceAssistant()
    try:
        assistant.main()
    finally:
        assistant.cleanup()
